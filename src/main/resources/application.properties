server.port=56081

spring.application.name=sharding-jdbc-simple

server.servlet.context-path = /sharding-jdbc-simple
spring.http.encoding.enabled = true
spring.http.encoding.charset = UTF-8
spring.http.encoding.force = true

spring.main.allow-bean-definition-overriding = true

mybatis.configuration.map-underscore-to-camel-case = true
###########################################################
#
#                       数据源参数配置-druid
#
###########################################################
initialSize=5
minIdle=5
maxIdle=100
maxActive=20
maxWait=60000
timeBetweenEvictionRunsMillis=60000
minEvictableIdleTimeMillis=300000
###########################################################
#
#                       数据源分片详细配置
#
###########################################################
# 打开sql输出日志
spring.shardingsphere.props.sql.show = true
#数据源名称，多数据源以逗号分隔
spring.shardingsphere.datasource.names = db1,db2
###########################################################

#################### 1库配置 ##############################
spring.shardingsphere.datasource.db1.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db1.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.db1.url = jdbc:mysql://localhost:3306/order_db_1?useUnicode=true
spring.shardingsphere.datasource.db1.username = root
spring.shardingsphere.datasource.db1.password = root
# 连接池的配置信息
# 初始化大小，最小，最大
spring.shardingsphere.datasource.db1.initialSize=${initialSize}
# 只需配置minIdle最小连接池数量，maxIdle已经不再使用，配置了也没效果
spring.shardingsphere.datasource.db1.minIdle=${minIdle}
# 最大连接池数量
spring.shardingsphere.datasource.db1.maxActive=${maxActive}
# 配置获取连接等待超时的时间
spring.shardingsphere.datasource.db1.maxWait=${maxWait}
# 用来检测连接是否有效的sql
spring.shardingsphere.datasource.db1.validationQuery=SELECT 1 FROM DUAL
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.shardingsphere.datasource.db1.timeBetweenEvictionRunsMillis=${timeBetweenEvictionRunsMillis}
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.shardingsphere.datasource.db1.minEvictableIdleTimeMillis=${minEvictableIdleTimeMillis}
###########################################################

#################### 2库配置 ##############################
spring.shardingsphere.datasource.db2.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db2.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.db2.url = jdbc:mysql://localhost:3306/order_db_2?useUnicode=true
spring.shardingsphere.datasource.db2.username = root
spring.shardingsphere.datasource.db2.password = root

spring.shardingsphere.datasource.db2.initialSize=${initialSize}
spring.shardingsphere.datasource.db2.minIdle=${minIdle}
spring.shardingsphere.datasource.db2.maxActive=${maxActive}
spring.shardingsphere.datasource.db2.maxWait=${maxWait}
spring.shardingsphere.datasource.db2.validationQuery=SELECT 1 FROM DUAL
spring.shardingsphere.datasource.db2.timeBetweenEvictionRunsMillis=${timeBetweenEvictionRunsMillis}
spring.shardingsphere.datasource.db2.minEvictableIdleTimeMillis=${minEvictableIdleTimeMillis}
###########################################################

#################### t_order表分片策略 ##############################
# 指定t_order表的数据分布情况，配置数据节点
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes = db$->{1..2}.t_order_$->{1..3}

# 分库策略，以user_id为分片键，分片策略为user_id % 2 + 1，user_id为偶数操作m1数据源，否则操作m2。
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column = user_id
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression = db$->{user_id % 2 + 1}

# 指定t_order表的分片策略，分片策略包括分片键和分片算法
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column = order_id
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression = t_order_$->{order_id % 2 + 1}

# 自定义t_order表分片策略
spring.shardingsphere.sharding.tables.t_order.table-strategy.complex.sharding-columns = order_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.complex.algorithm-class-name=com.ryf.dbsharding.simple.ShardingAlgorithm.SnoWalkerComplexShardingTable
###########################################################

#################### 指定t_order表的主键生成策略为SNOWFLAKE ##############################
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
#######################################################################################

# -----------------------------新公式解析-----------------------------
# 其中6表示总共有多少个分表，3表示每个库有多少张分表, 6/3 = 2 表示有多少个数据库；
# 上面这个例子，表示总共有2个数据库，每个数据库有3个分表，所以是2 * 3 = 6；


swagger.enable = true

logging.level.root = info
logging.level.org.springframework.web = info
logging.level.com.pbteach.dbsharding  = debug
logging.level.druid.sql = debug